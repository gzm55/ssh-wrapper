#!/bin/sh

set -eu
[ :"${DEBUG-}" != :true ] || set -x

## Usage:
#
#  Installed as symlink to this script, link name is ssh|scp|rsync,
#    then put the dir into PATH.
#
#  basename $0 as wrappered command
#
#  Env Switch:
#    DEBUG - if set to true, debug this script
#    NO_BREW - if set to true, skip brew installed openssh


## Check entry name
cmd="$(basename -- "$0")"
dir0="$(dirname -- "$0")"

case "$cmd" in
(ssh|scp|rsync) ;;
(ssh-copy-id) NO_BREW=true ;; # on macos, ssh-copy-id use a mac-only feature, so skip the brew version
(*) echo "[ERROR] ssh-wrapper must be linked as ssh or scp or rsync" >&2
    exit ;;
esac

brew_prefix=
if command -v brew >/dev/null; then
  brew_prefix="$(brew --prefix)"
else
  unset NO_BREW
fi

## Fix PATH
effective_path=
while read a_path; do
  case "$a_path" in
  ("") continue ;;
  ("${brew_prefix}/bin"|"${brew_prefix}/sbin"|"${brew_prefix}/bin/"|"${brew_prefix}/sbin/")
    ## Bypass brew installed binary if required
    case "$brew_prefix::${NO_BREW-}" in
    (""::*) ;;
    (*::true) continue ;;
    esac
    ;;
  ## Bypass dir for current script
  ("$dir0"|"${dir0}/") continue ;;
  esac
  case ":$effective_path:" in
  (*":$a_path:"*) continue ;; ## dedup
  esac
  effective_path="$effective_path":"$a_path"
done <<-END
	$(IFS=:;printf:%s\\n:$PATH)
	END
effective_path="${effective_path#:}"
effective_cmd="$(PATH="$effective_path" which "$cmd")"

## Check if need run ssh-ident
## ut: "ssh '-vouser G' xxx" should return 1
## ut: "ssh '-vGouser G' xxx" should return 0
## ut: "ssh '-Q cmd' xxx" should return 0
## ut: "ssh '-O cmd' xxx" should return 0
ssh_opt_has_remote() {
  local flag_with_param=bcDEeFIiJLlmOopQRSWw
  while [ $# -gt 0 ]; do
    local single_flags="${1%%[$flag_with_param]*}"
    local param_flag="${1#$single_flags}"
    case "$single_flags" in
    (-*[GV]*) return 1 ;;
    (-*) ;;
    (*) return 0 ;;
    esac
    case "$param_flag" in
    ('') shift || : ;;
    ([OQ]*) return 1 ;;
    ([$flag_with_param]) shift 2 || : ;;
    ([$flag_with_param]*) shift || : ;;
    esac
  done
  return 1
}

scp_opt_has_remote() {
  while [ $# -gt 0 ]; do
    case "$1" in
    (-[cFiloPS]) shift 2 || : ;;
    (-[cFiloPS]*) shift || : ;;
    (-*[cFilPS]) shift 2 || : ;;
    (-*) shift || : ;;
    (*:|*:*) return 0 ;; ## ssh proto
    (*) shift || : ;; ## local
    esac
  done
  return 1
}

rsync_opt_has_remote() {
  while [ $# -gt 0 ]; do
    case "$1" in
    (--daemon|--help|-h) return 1 ;;
    (--*=*) shift || : ;;
    (--backup-dir|--suffix|--chmod|--block-size|--rsh) shift 2 || : ;;
    (--rsync-path|--max-delete|--max-size|--min-size) shift 2 || : ;;
    (--partial-dir|--timeout|--modify-window|--temp-dir) shift 2 || : ;;
    (--compare-dest|--copy-dest|--link-dest|--compress-level) shift 2 || : ;;
    (--filter|--exclude|--exclude-from|--include) shift 2 || : ;;
    (--include-from|--files-from|--address|--port) shift 2 || : ;;
    (--sockopts|--out-format|--log-file|--log-file-format) shift 2 || : ;;
    (--password-file|--bwlimit|--write-batch|--only-write-batch) shift 2 || : ;;
    (--read-batch|--protocol|--checksum-seed|--config) shift 2 || : ;;
    (-*|rsync://*|*::|*::*) shift || : ;; ## rsync proto
    (*:|*:*) return 0 ;; ## ssh proto
    (*) shift || : ;; ## local
    esac
  done
  return 1
}

ssh_copy_id_opt_has_remote() {
  while [ $# -gt 0 ]; do
    case "$1" in
    (-[iop]?*) shift ;;
    (-[op]) shift 2 || : ;;
    (-i)
      test "$#" -le 2 || expr "$2" : "[-]" || shift
      shift
      ;;
    (-[h?]) return 1 ;;
    (--)
      case "$#" in
      (1) return 1 ;;
      (*) return 0 ;;
      esac
      ;;
    (-*) shift ;;
    (*) return 0
    esac
  done
  return 1
}


case "$cmd" in
(ssh)         ssh_opt_has_remote   "$@" ;;
(scp)         scp_opt_has_remote   "$@" ;;
(rsync)       rsync_opt_has_remote "$@" ;;
(ssh-copy-id)
  ## ssh-copy-id will call ssh multiple times, so use the $effective_path
  ## to force reuse the currect ssh-agent session
  ssh_copy_id_opt_has_remote "$@" && PATH="$effective_path"
  ;;
esac || PATH="$effective_path" exec "$effective_cmd" "$@"

## Check ssh-ident
SSH_IDENT=
if [ -L "$0" ]; then
  SSH_IDENT="$(dirname -- "$(readlink -- "$0")")/ext/ssh-ident/ssh-ident"
else
  SSH_IDENT="$dir0/ext/ssh-ident/ssh-ident"
fi
if [ ! -x "$SSH_IDENT" ]; then
  echo "[ERROR] cannot find ssh-ident at $SSH_IDENT" >&2
  exit 1
fi

BINARY_SSH="$effective_cmd" exec "$SSH_IDENT" "$@"
